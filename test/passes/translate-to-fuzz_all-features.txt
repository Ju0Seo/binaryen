(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $i64_=>_f32 (func (param i64) (result f32)))
 (type $f32_=>_f64 (func (param f32) (result f64)))
 (type $v128_v128_v128_=>_f64 (func (param v128 v128 v128) (result f64)))
 (type $externref_funcref_f64_f32_f64_nullref_f64_=>_f64 (func (param externref funcref f64 f32 f64 nullref f64) (result f64)))
 (type $i32_f32_exnref_f32_=>_nullref (func (param i32 f32 exnref f32) (result nullref)))
 (type $i64_=>_exnref (func (param i64) (result exnref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 8 funcref)
 (elem (i32.const 0) $func_8 $func_8 $func_11 $func_11 $func_11 $func_11 $func_15 $func_15)
 (global $global$5 (mut f32) (f32.const 74))
 (global $global$4 (mut nullref) (ref.null))
 (global $global$3 (mut i32) (i32.const 1263230471))
 (global $global$2 (mut i32) (i32.const -131073))
 (global $global$1 (mut f32) (f32.const -274877906944))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param i64))
 (event $event$1 (attr 0) (param i32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_13_invoker" (func $func_13_invoker))
 (export "func_15" (func $func_15))
 (export "func_15_invoker" (func $func_15_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (param $0 i32) (param $1 f32) (param $2 exnref) (param $3 f32) (result nullref)
  (local $4 (i32 i64 f32 i64 nullref funcref))
  (local $5 funcref)
  (local $6 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i64
    (block $label$1
     (call $log-f64
      (f64.const 151521282)
     )
     (return
      (ref.null)
     )
    )
   )
   (block
    (loop $label$2
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (ref.null)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$3
      (call $log-v128
       (v128.const i32x4 0x00000000 0x40c99d80 0xffffffff 0xffefffff)
      )
      (br $label$2)
     )
    )
    (drop
     (i32.eqz
      (local.tee $0
       (local.tee $0
        (local.get $0)
       )
      )
     )
    )
   )
  )
 )
 (func $func_8_invoker
  (drop
   (call $func_8
    (i32.const 286681110)
    (f32.const 1.1754943508222875e-38)
    (ref.null)
    (f32.const -2251799813685248)
   )
  )
  (drop
   (call $func_8
    (i32.const 403463947)
    (f32.const -nan:0x7fffe6)
    (ref.null)
    (f32.const 134432320)
   )
  )
  (drop
   (call $func_8
    (i32.const 504960521)
    (f32.const -3402823466385288598117041e14)
    (ref.null)
    (f32.const 94)
   )
  )
 )
 (func $func_10 (param $0 v128) (param $1 v128) (param $2 v128) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 1326414193142632845834209e102)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (nop)
   (f64.const 18973)
  )
 )
 (func $func_11 (param $0 externref) (param $1 funcref) (param $2 f64) (param $3 f32) (param $4 f64) (param $5 nullref) (param $6 f64) (result f64)
  (local $7 externref)
  (local $8 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if
   (i64.lt_u
    (i64.const 0)
    (i64.const 10205947650327310)
   )
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (f64.const -9223372036854775808)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$2
     (f32.store offset=22
      (i32.and
       (i32.const 4097)
       (i32.const 15)
      )
      (local.get $3)
     )
     (return
      (local.get $6)
     )
    )
   )
   (block $label$4
    (call $log-exnref
     (ref.null)
    )
    (return
     (local.get $2)
    )
   )
  )
 )
 (func $func_11_invoker
  (drop
   (call $func_11
    (ref.null)
    (ref.func $func_8)
    (f64.const -68)
    (f32.const -16383)
    (f64.const -68)
    (ref.null)
    (f64.const 1797693134862315708145274e284)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_13 (param $0 i64) (result exnref)
  (local $1 externref)
  (local $2 f32)
  (local $3 i64)
  (local $4 (f64 v128 nullref))
  (local $5 i32)
  (local $6 funcref)
  (local $7 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$1
   (call $log-i32
    (i32.const -63)
   )
   (return
    (ref.null)
   )
  )
 )
 (func $func_13_invoker
  (drop
   (call $func_13
    (i64.const 1152921504606846976)
   )
  )
  (drop
   (call $func_13
    (i64.const 202274421)
   )
  )
 )
 (func $func_15 (param $0 f32) (result f64)
  (local $1 externref)
  (local $2 funcref)
  (local $3 i64)
  (local $4 f32)
  (local $5 (v128 f32 nullref))
  (local $6 f64)
  (local $7 f32)
  (local $8 funcref)
  (local $9 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $6)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i64
    (i64.atomic.rmw8.and_u offset=4
     (i32.and
      (i32.rotr
       (i32.const 32768)
       (i32.const 291244820)
      )
      (i32.const 15)
     )
     (local.tee $3
      (local.get $3)
     )
    )
   )
   (return
    (local.get $6)
   )
  )
 )
 (func $func_15_invoker
  (drop
   (call $func_15
    (f32.const 3402823466385288598117041e14)
   )
  )
  (drop
   (call $func_15
    (f32.const 32767)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_17 (param $0 i64) (result f32)
  (local $1 f32)
  (local $2 nullref)
  (local $3 externref)
  (local $4 nullref)
  (local $5 (f64 i64 f32 exnref i32 v128))
  (local $6 v128)
  (local $7 (externref externref funcref f32 nullref))
  (local $8 i32)
  (local $9 exnref)
  (local $10 exnref)
  (local $11 externref)
  (local $12 f64)
  (local $13 (v128 f32 v128 nullref))
  (local $14 funcref)
  (local $15 f32)
  (local $16 exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 16777216)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f32.copysign
   (loop $label$0
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (f32.const -17592186044416)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (nop)
     (br_if $label$0
      (i32.eqz
       (block $label$3 (result i32)
        (loop $label$4
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (f32.const -4294967296)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block
          (block $label$24
           (if
            (i64.ne
             (select
              (i64.atomic.rmw16.cmpxchg_u offset=22
               (i32.and
                (block $label$25 (result i32)
                 (call $log-i64
                  (i64.rem_u
                   (local.get $0)
                   (local.get $0)
                  )
                 )
                 (f32.le
                  (global.get $global$1)
                  (if (result f32)
                   (i32.eqz
                    (global.get $global$2)
                   )
                   (block $label$26 (result f32)
                    (loop $label$27
                     (block
                      (if
                       (i32.eqz
                        (global.get $hangLimit)
                       )
                       (return
                        (local.get $1)
                       )
                      )
                      (global.set $hangLimit
                       (i32.sub
                        (global.get $hangLimit)
                        (i32.const 1)
                       )
                      )
                     )
                     (block
                      (block $label$28
                       (br_if $label$24
                        (i32.eqz
                         (br_if $label$25
                          (i32.const -35)
                          (i32.const -2147483648)
                         )
                        )
                       )
                       (call $log-nullref
                        (ref.null)
                       )
                      )
                      (br_if $label$27
                       (local.tee $8
                        (br_if $label$25
                         (local.get $8)
                         (i32.eqz
                          (local.get $8)
                         )
                        )
                       )
                      )
                      (drop
                       (select
                        (local.get $12)
                        (local.get $12)
                        (i32.const -131072)
                       )
                      )
                     )
                    )
                    (local.tee $1
                     (f32.min
                      (global.get $global$1)
                      (local.get $1)
                     )
                    )
                   )
                   (block $label$29
                    (call $log-i32
                     (call $hashMemory)
                    )
                    (br $label$24)
                   )
                  )
                 )
                )
                (i32.const 15)
               )
               (i64.xor
                (i64.load16_u offset=4
                 (i32.and
                  (local.get $8)
                  (i32.const 15)
                 )
                )
                (i64.const -33554432)
               )
               (block $label$30 (result i64)
                (i32.store16 offset=22
                 (i32.and
                  (local.tee $8
                   (local.get $8)
                  )
                  (i32.const 15)
                 )
                 (f32.ge
                  (f32.const -16)
                  (loop $label$31 (result f32)
                   (block
                    (if
                     (i32.eqz
                      (global.get $hangLimit)
                     )
                     (return
                      (f32.const -16)
                     )
                    )
                    (global.set $hangLimit
                     (i32.sub
                      (global.get $hangLimit)
                      (i32.const 1)
                     )
                    )
                   )
                   (block (result f32)
                    (block $label$32
                     (call $log-nullref
                      (local.tee $4
                       (local.get $2)
                      )
                     )
                     (local.set $15
                      (f32.const -0)
                     )
                    )
                    (br_if $label$31
                     (i32.add
                      (local.tee $8
                       (i32.const 2047)
                      )
                      (local.get $8)
                     )
                    )
                    (local.get $15)
                   )
                  )
                 )
                )
                (local.get $0)
               )
              )
              (i64.const 9223372036854775807)
              (i32.gt_s
               (global.get $global$3)
               (i32.eq
                (i32.load8_s offset=4
                 (i32.and
                  (tuple.extract 1
                   (tuple.make
                    (ref.null)
                    (i32.const 0)
                    (ref.func $log-nullref)
                    (ref.func $hashMemory)
                   )
                  )
                  (i32.const 15)
                 )
                )
                (local.tee $8
                 (local.tee $8
                  (local.tee $8
                   (local.tee $8
                    (local.tee $8
                     (local.get $8)
                    )
                   )
                  )
                 )
                )
               )
              )
             )
             (local.get $0)
            )
            (block $label$33
             (nop)
            )
            (block $label$34
             (nop)
            )
           )
           (nop)
          )
          (br_if $label$4
           (i32.const 15677)
          )
          (call $log-i32
           (call $hashMemory)
          )
         )
        )
        (i32.const 1585060895)
       )
      )
     )
     (local.tee $1
      (tuple.extract 2
       (block $label$9
        (call $log-i32
         (call $hashMemory)
        )
        (if
         (i32.eqz
          (if (result i32)
           (select
            (local.get $8)
            (i64.eqz
             (local.get $0)
            )
            (i64.eqz
             (local.get $0)
            )
           )
           (block $label$11 (result i32)
            (call $log-f32
             (local.get $15)
            )
            (i32.rem_u
             (local.get $8)
             (br_if $label$11
              (i16x8.extract_lane_u 1
               (v128.const i32x4 0x74687475 0x00000000 0x00000041 0x00000000)
              )
              (local.tee $8
               (if (result i32)
                (i32.eqz
                 (i32.const -4194303)
                )
                (i32.const -80)
                (local.get $8)
               )
              )
             )
            )
           )
           (block $label$13 (result i32)
            (nop)
            (local.get $8)
           )
          )
         )
         (block $label$14
          (local.set $9
           (loop $label$15 (result exnref)
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return
               (f32.const 0.7929999828338623)
              )
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block $label$16 (result exnref)
             (call $log-f32
              (local.get $1)
             )
             (local.get $9)
            )
           )
          )
          (br $label$0)
         )
         (block $label$17
          (nop)
          (br $label$0)
         )
        )
       )
      )
     )
    )
   )
   (f32.const 3088)
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
